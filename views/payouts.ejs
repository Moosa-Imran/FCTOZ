<!DOCTYPE html>
<html lang="en" class="light">
<head>
    <%- include('partials/head') %>
</head>
<body class="bg-slate-50 dark:bg-black text-slate-800 dark:text-slate-200">
    <div id="sidebar-overlay" class="fixed inset-0 bg-black/60 z-30 md:hidden hidden"></div>
    <div class="flex min-h-screen">
        <%- include('partials/sidebar') %>
        <div class="flex-1 md:ml-64">
            <%- include('partials/header') %>
            <main class="pt-24 px-4 sm:px-6 lg:px-8 pb-8">
                <!-- Header -->
                <div>
                    <h1 class="text-3xl font-bold">Payouts</h1>
                    <p class="mt-1 text-slate-500 dark:text-slate-400">Manage your payout addresses and view history.</p>
                </div>

                <!-- Payout Address Management -->
                <div class="mt-8 grid grid-cols-1 lg:grid-cols-3 gap-8">
                    <!-- Add New Address Form -->
                    <div class="lg:col-span-1">
                        <div class="p-6 bg-white dark:bg-slate-900/50 rounded-xl border border-slate-200 dark:border-slate-800 card-glow">
                            <h2 class="text-lg font-semibold">Add Payout Address</h2>
                            <form class="mt-4 space-y-4">
                                <div>
                                    <label for="payout-type" class="block text-sm font-medium text-slate-700 dark:text-slate-300">Type</label>
                                    <select id="payout-type" name="payout-type" class="mt-1 block w-full pl-3 pr-10 py-2 text-base bg-slate-100 dark:bg-slate-800 border-slate-300 dark:border-slate-700 focus:outline-none focus:ring-gold-500 focus:border-gold-500 sm:text-sm rounded-md">
                                        <option>USDT (TRC20)</option>
                                        <option>BTC</option>
                                        <option>Binance ID</option>
                                        <option>Bitget ID</option>
                                        <option>XRP</option>
                                        <option>SOL</option>
                                        <option>BNB</option>
                                    </select>
                                </div>
                                <div>
                                    <label for="payout-address" class="block text-sm font-medium text-slate-700 dark:text-slate-300">Address / ID</label>
                                    <input type="text" name="payout-address" id="payout-address" class="w-full mt-1 px-3 py-2 text-sm bg-slate-100 dark:bg-slate-800 border border-slate-300 dark:border-slate-700 focus:border-gold-500 focus:ring-gold-500 rounded-lg" placeholder="Enter address or ID">
                                </div>
                                <button type="submit" class="w-full px-5 py-2.5 font-semibold text-white bg-gold-600 hover:bg-gold-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gold-500 dark:focus:ring-offset-black button-glow flex items-center justify-center">
                                    <i data-lucide="plus-circle" class="h-5 w-5 mr-2"></i> Add Address
                                </button>
                            </form>
                        </div>
                    </div>
                    <!-- Existing Addresses -->
                    <div class="lg:col-span-2">
                        <h2 class="text-lg font-semibold">Saved Addresses</h2>
                        <div class="mt-4 space-y-3">
                             <% payouts.payoutAddresses.forEach(addr => { %>
                                <div class="p-4 bg-white dark:bg-slate-900/50 rounded-xl border border-slate-200 dark:border-slate-800 flex items-center justify-between">
                                    <div>
                                        <div class="flex items-center">
                                            <span class="font-semibold"><%= addr.type %></span>
                                            <% if(addr.isPrimary) { %>
                                                <span class="ml-2 text-xs font-medium text-green-700 bg-green-100 dark:text-green-300 dark:bg-green-500/20 px-2 py-0.5 rounded-full">Primary</span>
                                            <% } %>
                                        </div>
                                        <p class="text-sm text-slate-500 dark:text-slate-400 font-mono"><%= addr.address %></p>
                                    </div>
                                    <button class="text-slate-400 hover:text-red-500"><i data-lucide="trash-2" class="h-5 w-5"></i></button>
                                </div>
                             <% }); %>
                        </div>
                    </div>
                </div>

                <!-- Payout History Table -->
                <div class="mt-10">
                    <h2 class="text-xl font-semibold">Payout History</h2>
                    <div class="mt-4 bg-white dark:bg-slate-900/50 rounded-xl border border-slate-200 dark:border-slate-800 card-glow overflow-hidden">
                        <!-- ... Payout history table similar to transaction history ... -->
                    </div>
                </div>
            </main>
        </div>
    </div>
  <script>
    // Initialize Lucide Icons
    lucide.createIcons();

    // --- Theme Toggler ---
    const themeToggle = document.getElementById('theme-toggle');
    const htmlEl = document.documentElement;
    themeToggle.addEventListener('click', () => {
      htmlEl.classList.toggle('dark');
      localStorage.setItem('theme', htmlEl.classList.contains('dark') ? 'dark' : 'light');
      renderChart(); // Re-render chart with new theme colors
    });

    // --- Mobile Sidebar ---
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const sidebar = document.querySelector('aside');
    const sidebarCloseButton = document.getElementById('sidebar-close-button');
    const sidebarOverlay = document.getElementById('sidebar-overlay');
    const openSidebar = () => { sidebar.classList.remove('-translate-x-full'); sidebarOverlay.classList.remove('hidden'); };
    const closeSidebar = () => { sidebar.classList.add('-translate-x-full'); sidebarOverlay.classList.add('hidden'); };
    mobileMenuButton.addEventListener('click', openSidebar);
    sidebarCloseButton.addEventListener('click', closeSidebar);
    sidebarOverlay.addEventListener('click', closeSidebar);

    // --- Chart.js Implementation ---
    let accountGrowthChart;
    const renderChart = () => {
      setTimeout(() => {
        const isDarkMode = document.documentElement.classList.contains('dark');
        const gridColor = isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';
        const labelColor = isDarkMode ? '#cbd5e1' : '#475569';
        const goldColor = '#eab308';
        const goldColorDark = '#facc15';
        const tooltipBgColor = isDarkMode ? '#0f172a' : '#fff';
        const tooltipBorderColor = isDarkMode ? '#334155' : '#e2e8f0';

        const ctx = document.getElementById('accountGrowthChart').getContext('2d');
        const gradient = ctx.createLinearGradient(0, 0, 0, 300);
        gradient.addColorStop(0, isDarkMode ? 'rgba(250, 204, 21, 0.4)' : 'rgba(234, 179, 8, 0.7)');
        gradient.addColorStop(1, isDarkMode ? 'rgba(250, 204, 21, 0)' : 'rgba(234, 179, 8, 0.1)');

        const chartData = {
          labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],
          datasets: [{
            label: 'Account Value',
            data: [45000, 48000, 47000, 51000, 55000, 53000, 54329],
            borderColor: isDarkMode ? goldColorDark : goldColor,
            backgroundColor: gradient,
            fill: true, tension: 0.4,
            pointBackgroundColor: isDarkMode ? goldColorDark : goldColor,
            pointBorderColor: '#fff', pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: isDarkMode ? goldColorDark : goldColor,
            pointRadius: 4, pointHoverRadius: 6,
          }]
        };

        const chartOptions = {
          responsive: true, maintainAspectRatio: false,
          scales: {
            y: { beginAtZero: false, grid: { color: gridColor, drawBorder: false }, ticks: { color: labelColor, callback: (value) => '$' + value / 1000 + 'k' } },
            x: { grid: { display: false }, ticks: { color: labelColor } }
          },
          plugins: {
            legend: { display: false },
            tooltip: {
              backgroundColor: tooltipBgColor, titleColor: isDarkMode ? '#e2e8f0' : '#334155',
              bodyColor: isDarkMode ? '#cbd5e1' : '#475569', borderColor: tooltipBorderColor,
              borderWidth: 1, padding: 12, displayColors: false,
              callbacks: { label: (context) => `Balance: $${context.parsed.y.toLocaleString()}` }
            },
            afterDraw: (chart) => {
              if (isDarkMode) {
                const ctx = chart.ctx;
                ctx.save();
                ctx.shadowColor = 'rgba(250, 204, 21, 0.5)';
                ctx.shadowBlur = 20;
                chart.draw();
                ctx.restore();
              }
            }
          },
          interaction: { mode: 'index', intersect: false },
        };

        if (accountGrowthChart) accountGrowthChart.destroy();
        accountGrowthChart = new Chart(ctx, { type: 'line', data: chartData, options: chartOptions });
      }, 50);
    };
    window.addEventListener('load', renderChart);
  </script>
</body>
</html>
