<!DOCTYPE html>
<html lang="en" class="light">
<head>
    <%- include('partials/head') %>
</head>
<body class="bg-slate-50 dark:bg-black text-slate-800 dark:text-slate-200">
    <div id="sidebar-overlay" class="fixed inset-0 bg-black/60 z-30 md:hidden hidden"></div>
    <div class="flex min-h-screen">
        <%- include('partials/sidebar') %>
        <div class="flex-1 md:ml-64">
            <%- include('partials/header') %>
            <main class="pt-24 px-4 sm:px-6 lg:px-8 pb-8">
                <!-- Header -->
                <div>
                    <h1 class="text-3xl font-bold">P&L Reports</h1>
                    <p class="mt-1 text-slate-500 dark:text-slate-400">Submit your daily profit & loss and track submission history.</p>
                </div>

                <!-- Submit New Report Card -->
                <div class="mt-8 p-6 bg-white dark:bg-slate-900/50 rounded-xl border border-slate-200 dark:border-slate-800 card-glow">
                    <h2 class="text-lg font-semibold">Submit Today's Report</h2>
                    <p class="text-sm text-slate-500 dark:text-slate-400 mt-1">Submissions are reviewed by the team. We may request further details.</p>
                    <form class="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
                        <div class="md:col-span-1">
                            <label for="pnl-amount" class="block text-sm font-medium text-slate-700 dark:text-slate-300">Profit / Loss Amount (USD)</label>
                            <div class="relative mt-1">
                                <span class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3 text-slate-500">$</span>
                                <input type="number" name="pnl-amount" id="pnl-amount" class="w-full pl-7 pr-4 py-2 text-sm bg-slate-100 dark:bg-slate-800 border border-slate-300 dark:border-slate-700 focus:border-gold-500 focus:ring-gold-500 rounded-lg" placeholder="e.g., 450.25 or -150.80">
                            </div>
                        </div>
                        <div class="md:col-span-2">
                             <button type="submit" class="w-full md:w-auto px-5 py-2.5 font-semibold text-white bg-gold-600 hover:bg-gold-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gold-500 dark:focus:ring-offset-black button-glow flex items-center justify-center">
                                <i data-lucide="send" class="h-5 w-5 mr-2"></i> Submit for Review
                            </button>
                        </div>
                    </form>
                </div>

                <!-- Submission History Table -->
                <div class="mt-10">
                    <h2 class="text-xl font-semibold">Submission History</h2>
                    <div class="mt-4 bg-white dark:bg-slate-900/50 rounded-xl border border-slate-200 dark:border-slate-800 card-glow overflow-hidden">
                        <div class="overflow-x-auto">
                            <table class="w-full text-sm text-left">
                                <thead class="bg-slate-50 dark:bg-slate-900 border-b border-slate-200 dark:border-slate-800">
                                    <tr>
                                        <th class="px-6 py-3 font-medium">Date</th>
                                        <th class="px-6 py-3 font-medium">Submitted P&L</th>
                                        <th class="px-6 py-3 font-medium">Status</th>
                                        <th class="px-6 py-3 font-medium">Admin Remarks</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% reports.submissions.forEach(sub => { %>
                                        <tr class="border-b border-slate-200 dark:border-slate-800">
                                            <td class="px-6 py-4"><%= sub.date %></td>
                                            <td class="px-6 py-4 font-semibold <%= sub.submittedPL >= 0 ? 'text-green-500' : 'text-red-500' %>">
                                                <%= sub.submittedPL >= 0 ? '+' : '' %>$<%= Math.abs(sub.submittedPL).toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2}) %>
                                            </td>
                                            <td class="px-6 py-4">
                                                <% if(sub.status === 'Approved') { %>
                                                    <span class="inline-flex items-center px-2.5 py-1 text-xs font-medium text-green-700 bg-green-100 dark:text-green-300 dark:bg-green-500/20 rounded-full"> <i data-lucide="check-circle-2" class="w-4 h-4 mr-1.5"></i> Approved </span>
                                                <% } else if(sub.status === 'Pending') { %>
                                                    <span class="inline-flex items-center px-2.5 py-1 text-xs font-medium text-yellow-700 bg-yellow-100 dark:text-yellow-300 dark:bg-yellow-500/20 rounded-full"> <i data-lucide="refresh-cw" class="w-4 h-4 mr-1.5"></i> Pending </span>
                                                <% } else { %>
                                                    <span class="inline-flex items-center px-2.5 py-1 text-xs font-medium text-red-700 bg-red-100 dark:text-red-300 dark:bg-red-500/20 rounded-full"> <i data-lucide="x-circle" class="w-4 h-4 mr-1.5"></i> Rejected </span>
                                                <% } %>
                                            </td>
                                            <td class="px-6 py-4 text-slate-500 dark:text-slate-400 italic"><%= sub.remarks || '...' %></td>
                                        </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

            </main>
        </div>
    </div>
    
  <script>
    // Initialize Lucide Icons
    lucide.createIcons();

    // --- Theme Toggler ---
    const themeToggle = document.getElementById('theme-toggle');
    const htmlEl = document.documentElement;
    themeToggle.addEventListener('click', () => {
      htmlEl.classList.toggle('dark');
      localStorage.setItem('theme', htmlEl.classList.contains('dark') ? 'dark' : 'light');
      renderChart(); // Re-render chart with new theme colors
    });

    // --- Mobile Sidebar ---
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const sidebar = document.querySelector('aside');
    const sidebarCloseButton = document.getElementById('sidebar-close-button');
    const sidebarOverlay = document.getElementById('sidebar-overlay');
    const openSidebar = () => { sidebar.classList.remove('-translate-x-full'); sidebarOverlay.classList.remove('hidden'); };
    const closeSidebar = () => { sidebar.classList.add('-translate-x-full'); sidebarOverlay.classList.add('hidden'); };
    mobileMenuButton.addEventListener('click', openSidebar);
    sidebarCloseButton.addEventListener('click', closeSidebar);
    sidebarOverlay.addEventListener('click', closeSidebar);

    // --- Chart.js Implementation ---
    let accountGrowthChart;
    const renderChart = () => {
      setTimeout(() => {
        const isDarkMode = document.documentElement.classList.contains('dark');
        const gridColor = isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';
        const labelColor = isDarkMode ? '#cbd5e1' : '#475569';
        const goldColor = '#eab308';
        const goldColorDark = '#facc15';
        const tooltipBgColor = isDarkMode ? '#0f172a' : '#fff';
        const tooltipBorderColor = isDarkMode ? '#334155' : '#e2e8f0';

        const ctx = document.getElementById('accountGrowthChart').getContext('2d');
        const gradient = ctx.createLinearGradient(0, 0, 0, 300);
        gradient.addColorStop(0, isDarkMode ? 'rgba(250, 204, 21, 0.4)' : 'rgba(234, 179, 8, 0.7)');
        gradient.addColorStop(1, isDarkMode ? 'rgba(250, 204, 21, 0)' : 'rgba(234, 179, 8, 0.1)');

        const chartData = {
          labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],
          datasets: [{
            label: 'Account Value',
            data: [45000, 48000, 47000, 51000, 55000, 53000, 54329],
            borderColor: isDarkMode ? goldColorDark : goldColor,
            backgroundColor: gradient,
            fill: true, tension: 0.4,
            pointBackgroundColor: isDarkMode ? goldColorDark : goldColor,
            pointBorderColor: '#fff', pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: isDarkMode ? goldColorDark : goldColor,
            pointRadius: 4, pointHoverRadius: 6,
          }]
        };

        const chartOptions = {
          responsive: true, maintainAspectRatio: false,
          scales: {
            y: { beginAtZero: false, grid: { color: gridColor, drawBorder: false }, ticks: { color: labelColor, callback: (value) => '$' + value / 1000 + 'k' } },
            x: { grid: { display: false }, ticks: { color: labelColor } }
          },
          plugins: {
            legend: { display: false },
            tooltip: {
              backgroundColor: tooltipBgColor, titleColor: isDarkMode ? '#e2e8f0' : '#334155',
              bodyColor: isDarkMode ? '#cbd5e1' : '#475569', borderColor: tooltipBorderColor,
              borderWidth: 1, padding: 12, displayColors: false,
              callbacks: { label: (context) => `Balance: $${context.parsed.y.toLocaleString()}` }
            },
            afterDraw: (chart) => {
              if (isDarkMode) {
                const ctx = chart.ctx;
                ctx.save();
                ctx.shadowColor = 'rgba(250, 204, 21, 0.5)';
                ctx.shadowBlur = 20;
                chart.draw();
                ctx.restore();
              }
            }
          },
          interaction: { mode: 'index', intersect: false },
        };

        if (accountGrowthChart) accountGrowthChart.destroy();
        accountGrowthChart = new Chart(ctx, { type: 'line', data: chartData, options: chartOptions });
      }, 50);
    };
    window.addEventListener('load', renderChart);
  </script>
</body>
</html>
