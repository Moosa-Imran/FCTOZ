<!DOCTYPE html>
<html lang="en" class="light">
<head>
    <%- include('partials/head') %>
</head>
<body class="bg-slate-50 dark:bg-black text-slate-800 dark:text-slate-200">
    <div id="sidebar-overlay" class="fixed inset-0 bg-black/60 z-30 md:hidden hidden"></div>
    <div class="flex min-h-screen">
        <%- include('partials/sidebar') %>
        <div class="flex-1 md:ml-64">
            <%- include('partials/header') %>
            <main class="pt-24 px-4 sm:px-6 lg:px-8 pb-8">
                <!-- Header -->
                <div>
                    <h1 class="text-3xl font-bold">Account Settings</h1>
                    <p class="mt-1 text-slate-500 dark:text-slate-400">Manage your profile, password, and security settings.</p>
                </div>

                <!-- Settings Cards -->
                <div class="mt-8 space-y-8">
                    <!-- Profile Information -->
                    <div class="p-6 bg-white dark:bg-slate-900/50 rounded-xl border border-slate-200 dark:border-slate-800 card-glow">
                        <h2 class="text-lg font-semibold">Profile Information</h2>
                        <div class="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-slate-700 dark:text-slate-300">Full Name</label>
                                <input type="text" value="<%= settings.user.name %>" class="w-full mt-1 px-3 py-2 text-sm bg-slate-100 dark:bg-slate-800 border border-slate-300 dark:border-slate-700 rounded-lg">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-slate-700 dark:text-slate-300">Email Address</label>
                                <input type="email" value="<%= settings.user.email %>" class="w-full mt-1 px-3 py-2 text-sm bg-slate-100 dark:bg-slate-800 border border-slate-300 dark:border-slate-700 rounded-lg">
                            </div>
                        </div>
                        <div class="mt-4 flex justify-end">
                            <button class="px-5 py-2 font-semibold text-white bg-gold-600 hover:bg-gold-700 rounded-lg button-glow">Save Changes</button>
                        </div>
                    </div>

                    <!-- Change Password -->
                    <div class="p-6 bg-white dark:bg-slate-900/50 rounded-xl border border-slate-200 dark:border-slate-800 card-glow">
                        <h2 class="text-lg font-semibold">Change Password</h2>
                        <div class="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                             <div>
                                <label class="block text-sm font-medium">Current Password</label>
                                <input type="password" class="w-full mt-1 px-3 py-2 text-sm bg-slate-100 dark:bg-slate-800 border border-slate-300 dark:border-slate-700 rounded-lg">
                            </div>
                            <div>
                                <label class="block text-sm font-medium">New Password</label>
                                <input type="password" class="w-full mt-1 px-3 py-2 text-sm bg-slate-100 dark:bg-slate-800 border border-slate-300 dark:border-slate-700 rounded-lg">
                            </div>
                            <div>
                                <label class="block text-sm font-medium">Confirm New Password</label>
                                <input type="password" class="w-full mt-1 px-3 py-2 text-sm bg-slate-100 dark:bg-slate-800 border border-slate-300 dark:border-slate-700 rounded-lg">
                            </div>
                        </div>
                         <div class="mt-4 flex justify-end">
                            <button class="px-5 py-2 font-semibold text-white bg-gold-600 hover:bg-gold-700 rounded-lg button-glow">Update Password</button>
                        </div>
                    </div>

                    <!-- Two-Factor Authentication -->
                    <div class="p-6 bg-white dark:bg-slate-900/50 rounded-xl border border-slate-200 dark:border-slate-800 card-glow">
                        <h2 class="text-lg font-semibold">Two-Factor Authentication (2FA)</h2>
                        <div class="mt-4 flex items-center justify-between">
                            <div>
                                <p class="font-medium">Authenticator App</p>
                                <p class="text-sm text-slate-500 dark:text-slate-400">Add an extra layer of security to your account.</p>
                            </div>
                            <button class="px-5 py-2 font-semibold text-white <%= settings.user.twoFactorEnabled ? 'bg-red-600 hover:bg-red-700' : 'bg-green-600 hover:bg-green-700' %> rounded-lg">
                                <%= settings.user.twoFactorEnabled ? 'Disable 2FA' : 'Enable 2FA' %>
                            </button>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>
  <script>
    // Initialize Lucide Icons
    lucide.createIcons();

    // --- Theme Toggler ---
    const themeToggle = document.getElementById('theme-toggle');
    const htmlEl = document.documentElement;
    themeToggle.addEventListener('click', () => {
      htmlEl.classList.toggle('dark');
      localStorage.setItem('theme', htmlEl.classList.contains('dark') ? 'dark' : 'light');
      renderChart(); // Re-render chart with new theme colors
    });

    // --- Mobile Sidebar ---
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const sidebar = document.querySelector('aside');
    const sidebarCloseButton = document.getElementById('sidebar-close-button');
    const sidebarOverlay = document.getElementById('sidebar-overlay');
    const openSidebar = () => { sidebar.classList.remove('-translate-x-full'); sidebarOverlay.classList.remove('hidden'); };
    const closeSidebar = () => { sidebar.classList.add('-translate-x-full'); sidebarOverlay.classList.add('hidden'); };
    mobileMenuButton.addEventListener('click', openSidebar);
    sidebarCloseButton.addEventListener('click', closeSidebar);
    sidebarOverlay.addEventListener('click', closeSidebar);

    // --- Chart.js Implementation ---
    let accountGrowthChart;
    const renderChart = () => {
      setTimeout(() => {
        const isDarkMode = document.documentElement.classList.contains('dark');
        const gridColor = isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';
        const labelColor = isDarkMode ? '#cbd5e1' : '#475569';
        const goldColor = '#eab308';
        const goldColorDark = '#facc15';
        const tooltipBgColor = isDarkMode ? '#0f172a' : '#fff';
        const tooltipBorderColor = isDarkMode ? '#334155' : '#e2e8f0';

        const ctx = document.getElementById('accountGrowthChart').getContext('2d');
        const gradient = ctx.createLinearGradient(0, 0, 0, 300);
        gradient.addColorStop(0, isDarkMode ? 'rgba(250, 204, 21, 0.4)' : 'rgba(234, 179, 8, 0.7)');
        gradient.addColorStop(1, isDarkMode ? 'rgba(250, 204, 21, 0)' : 'rgba(234, 179, 8, 0.1)');

        const chartData = {
          labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],
          datasets: [{
            label: 'Account Value',
            data: [45000, 48000, 47000, 51000, 55000, 53000, 54329],
            borderColor: isDarkMode ? goldColorDark : goldColor,
            backgroundColor: gradient,
            fill: true, tension: 0.4,
            pointBackgroundColor: isDarkMode ? goldColorDark : goldColor,
            pointBorderColor: '#fff', pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: isDarkMode ? goldColorDark : goldColor,
            pointRadius: 4, pointHoverRadius: 6,
          }]
        };

        const chartOptions = {
          responsive: true, maintainAspectRatio: false,
          scales: {
            y: { beginAtZero: false, grid: { color: gridColor, drawBorder: false }, ticks: { color: labelColor, callback: (value) => '$' + value / 1000 + 'k' } },
            x: { grid: { display: false }, ticks: { color: labelColor } }
          },
          plugins: {
            legend: { display: false },
            tooltip: {
              backgroundColor: tooltipBgColor, titleColor: isDarkMode ? '#e2e8f0' : '#334155',
              bodyColor: isDarkMode ? '#cbd5e1' : '#475569', borderColor: tooltipBorderColor,
              borderWidth: 1, padding: 12, displayColors: false,
              callbacks: { label: (context) => `Balance: $${context.parsed.y.toLocaleString()}` }
            },
            afterDraw: (chart) => {
              if (isDarkMode) {
                const ctx = chart.ctx;
                ctx.save();
                ctx.shadowColor = 'rgba(250, 204, 21, 0.5)';
                ctx.shadowBlur = 20;
                chart.draw();
                ctx.restore();
              }
            }
          },
          interaction: { mode: 'index', intersect: false },
        };

        if (accountGrowthChart) accountGrowthChart.destroy();
        accountGrowthChart = new Chart(ctx, { type: 'line', data: chartData, options: chartOptions });
      }, 50);
    };
    window.addEventListener('load', renderChart);
  </script>
</body>
</html>
